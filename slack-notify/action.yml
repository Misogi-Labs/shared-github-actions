name: 'Slack PR Notification'
description: 'Send Pull Request notifications to Slack with proper formatting and error handling'

inputs:
  webhook-url:
    description: 'Slack webhook URL'
    required: true
  pr-title:
    description: 'Pull Request title'
    required: true
  pr-author:
    description: 'Pull Request author'
    required: true
  pr-branch:
    description: 'Source branch name'
    required: true
  pr-target:
    description: 'Target branch name'
    required: true
  pr-url:
    description: 'Pull Request URL'
    required: true
  pr-description:
    description: 'Pull Request description'
    required: false
    default: ''
  action-type:
    description: 'GitHub action type (opened, edited, etc.)'
    required: false
    default: 'opened'
  repository-name:
    description: 'Repository name for context'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
      shell: bash
      
    - name: Send Slack Notification
      shell: bash
      env:
        PR_TITLE: ${{ inputs.pr-title }}
        PR_DESCRIPTION: ${{ inputs.pr-description }}
        PR_URL: ${{ inputs.pr-url }}
        PR_AUTHOR: ${{ inputs.pr-author }}
        PR_BRANCH: ${{ inputs.pr-branch }}
        TARGET_BRANCH: ${{ inputs.pr-target }}
        WEBHOOK_URL: ${{ inputs.webhook-url }}
        ACTION_TYPE_INPUT: ${{ inputs.action-type }}
        REPOSITORY_NAME: ${{ inputs.repository-name }}
      run: |
        # Use environment variables to safely handle special characters
        
        # Clean and truncate description safely
        CLEANED_DESCRIPTION=$(printf '%s' "$PR_DESCRIPTION" | tr -d '\r' | head -c 500)
        if [ ${#CLEANED_DESCRIPTION} -eq 500 ]; then
          CLEANED_DESCRIPTION="${CLEANED_DESCRIPTION}..."
        fi
        
        # Add repository context if provided
        REPO_CONTEXT=""
        if [ -n "$REPOSITORY_NAME" ]; then
          REPO_CONTEXT="*Repository:* $REPOSITORY_NAME\n"
        fi
        
        # Determine action type for message
        case "$ACTION_TYPE_INPUT" in
          "edited")
            ACTION_TYPE="📝 *Pull Request Updated*"
            ;;
          "reopened")
            ACTION_TYPE="🔄 *Pull Request Reopened*"
            ;;
          *)
            ACTION_TYPE="🆕 *New Pull Request Created*"
            ;;
        esac
        
        # Create message
        cat > /tmp/slack_message.txt << EOF
        $ACTION_TYPE
        
        ${REPO_CONTEXT}*Title:* $PR_TITLE
        *Author:* $PR_AUTHOR
        *Branch:* $PR_BRANCH → $TARGET_BRANCH
        *Description:* ${CLEANED_DESCRIPTION:-No description provided}
        
        *Link:* $PR_URL
        EOF
        
        # Debug: Check if webhook URL is available
        if [ -z "$WEBHOOK_URL" ]; then
          echo "❌ ERROR: webhook-url input is not provided"
          echo "Please provide the Slack webhook URL as an input"
          exit 1
        fi
        
        # Send to Slack with proper JSON escaping
        echo "🔄 Sending to Slack webhook..."
        
        # Use jq to properly escape JSON from our message file
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H 'Content-type: application/json' \
          -d "$(jq -n --rawfile text /tmp/slack_message.txt '{text: $text}')" \
          "$WEBHOOK_URL")
        
        # Extract HTTP status code (last line)
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
        
        if [ "$HTTP_CODE" -eq 200 ]; then
          echo "✅ Slack notification sent successfully"
        else
          echo "❌ Failed to send Slack notification. HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
        
        # Clean up temporary files
        rm -f /tmp/slack_message.txt